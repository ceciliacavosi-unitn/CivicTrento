# Documentazione del Progetto

## Panoramica

Il progetto è suddiviso in due macro-componenti:

1. **Frontend Flutter**: la cartella `lib/` contiene tutto il codice sorgente dell’app mobile/web.
2. **Backend FastAPI**: la cartella `backend-api/` gestisce API e persistenza dati.

Entrambi i componenti comunicano tramite HTTP.

---

## Struttura principale

| Cartella / File                   | Descrizione                                                                                           |
|-----------------------------------|-------------------------------------------------------------------------------------------------------|
| `backend-api/`                    | Codice backend (FastAPI): definisce gli endpoint API per autenticazione, profilo utente e dati civici. |
| `lib/`                            | Codice sorgente Flutter, cuore dell’app. Organizzato in moduli: `config`, `dominio`, `presentazione`, `servizi`. |
| `test/`                           | Test automatici (unit, widget).                                                                        |
| `pubspec.yaml`                    | Configurazione Flutter (dipendenze, asset).                                                            |
| `docker-compose.yml`, `Dockerfile`| Configurazioni per containerizzare sia frontend sia backend.                                           |
| `README.md`                       | Guida introduttiva.                                                                                   |

---

## backend-api/

- `main.py`: file principale che definisce tutti gli endpoint (login, registrazione, profilo, dati civici).
- `requirements.txt`: elenco dipendenze Python.
- `users.txt` / `data.txt`: file CSV per salvare utenti e dati civici.
- `Dockerfile`: containerizzazione backend.

Collegamenti: gli endpoint sono consumati dai servizi Dart in `lib/servizi/`.

---

## lib/

### 1. config/

- `api_endpoints.dart`: definisce tutti gli endpoint API.
- `costanti.dart`: costanti generali (colori, dimensioni, stringhe fisse).
- `enums.dart`: enum condivisi tra più parti dell’app.

Collegamenti: utilizzato da `servizi/`, `dominio/` e `presentazione/`.

### 2. dominio/

Contiene la logica di business:

#### gestione/
- `sistema_autenticazione.dart`: regole autenticazione.
- `sistema_civic_coins.dart`: logica Civic-Coins.

#### monitoraggio/
- `gravita_multa.dart`, `servizio_bollette.dart`, `servizio_multe.dart` ecc.: gestione monitoraggio.

#### premi/
- `premio.dart`, `premio_abbonamento.dart`, `tipo_premio.dart` ecc.: gestione premi.

#### storico/
- `bollette.dart`, `multe.dart`, `spostamenti.dart`: storico operazioni.

#### utenti/
- `utente.dart`: classe generica Utente.
- `cittadino.dart`: cittadino.
- `amministratore.dart`: amministratore.

Collegamenti: i modelli sono usati da `presentazione/` e `servizi/`.

### 3. presentazione/

#### schermate/
- Schermate come `login_screen.dart`, `home_screen.dart`, `profilo_screen.dart` ecc.

#### widget/
- Componenti riutilizzabili: `dialogo_conferma.dart`, `storico_elemento.dart` ecc.

Collegamenti: le schermate usano widget e servizi.

### 4. servizi/

- `auth_service.dart`: login e registrazione.
- `cittadino_service.dart`: profilo e dati civici.
- `utente_service.dart`: preferenze utente.
- Altri servizi: `admin_service.dart`, `premio_service.dart`, ecc.

Collegamenti: usano `api_endpoints.dart` e restituiscono modelli di `dominio/`.

---

## Differenze tra file simili

Esempio:
- `utente.dart` (dominio/utenti): modello dati Utente.
- `utente_service.dart` (servizi): servizio HTTP per operazioni sull'utente.

Uno rappresenta **la struttura dati**, l’altro **la logica di comunicazione**.

---

## Flusso tipico

1. L’utente apre l’app (presentazione/).
2. Una schermata (es. `login_screen.dart`) chiama `auth_service.dart`.
3. Il servizio contatta il backend e riceve dati.
4. I dati sono modellati (es. `cittadino.dart`).
5. I widget mostrano i dati.

---

## Conclusione

La struttura è ben separata in:
- Config e servizi (`config/`, `servizi/`)
- Business logic (`dominio/`)
- UI e widget (`presentazione/`)

Permette una manutenzione modulare e chiara.

